{
  "package_name": "com.steve_os.doctor_apps",
  "project_description": "A medical patient management Flutter application enabling healthcare professionals to efficiently manage patient records. The app provides comprehensive functionality for patient lifecycle management, including patient list view, patient detail view, patient creation/editing, and startup screen. Key features include patient data entry, search capabilities, interactive patient cards, and a robust navigation system with reactive state management.",
  "architecture_overview": "Built using the Stacked architecture with MVVM design pattern, the application leverages dependency injection via GetIt, reactive ViewModels, and centralized services. Each feature contains a View, ViewModel, and optional Service/Repository layer. The architecture promotes separation of concerns, modular design, and reactive programming principles, with a focus on maintainability and scalability.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "Base application view model using the Stacked architectural pattern, serving as a foundation for managing application-wide state and providing reactive capabilities",
      "class_diagram": "@startuml\nclass AppViewModel {\n}\nBaseViewModel <|-- AppViewModel\n@enduml",
      "methods": [
        {
          "name": "constructor",
          "description": "Creates an empty application view model extending BaseViewModel",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/services/patient_service.dart",
      "description": "A service layer that manages patient-related operations, providing a clean abstraction between the data repository and application logic for patient data management in a medical application",
      "class_diagram": "@startuml\nclass PatientService {\n  -PatientRepository _repository\n  -AnalyticService _analyticService\n  +Future<List<Patient>> getPatients()\n  +Future<Patient> getPatient(int id)\n  +Future<Patient> createPatient(Patient patient)\n  +Future<Patient> updatePatient(Patient patient)\n  +Future<void> deletePatient(int id)\n}\n@enduml",
      "methods": [
        {
          "name": "getPatients",
          "description": "Retrieves a list of all patients from the repository",
          "parameters": null,
          "return_type": "Future<List<Patient>>"
        },
        {
          "name": "getPatient",
          "description": "Retrieves a specific patient by their unique identifier",
          "parameters": [
            "int id"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "createPatient",
          "description": "Creates a new patient record and logs the creation event",
          "parameters": [
            "Patient patient"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "updatePatient",
          "description": "Updates an existing patient record and logs the update event",
          "parameters": [
            "Patient patient"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "deletePatient",
          "description": "Deletes a patient record by their unique identifier and logs the deletion event",
          "parameters": [
            "int id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "patient_repository.dart",
        "patient.dart",
        "analytic_service.dart"
      ]
    },
    {
      "name": "lib/features/patient/patient_form_view.dart",
      "description": "A Flutter widget responsible for creating and editing patient records, providing a comprehensive form interface for medical professionals to input and manage patient information with robust validation and state management.",
      "class_diagram": "@startuml\nclass PatientFormView {\n  -int patientId\n  +builder(context, viewModel)\n  +viewModelBuilder(context)\n  +onViewModelReady(viewModel)\n}\nnote right: Manages patient data entry/editing workflow\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the user interface for patient form with input fields, error handling, and save functionality",
          "parameters": [
            "BuildContext",
            "PatientFormViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the view model instance for managing patient form state and logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PatientFormViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the view model, preparing it for data entry or editing",
          "parameters": [
            "PatientFormViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "patient_form_viewmodel.dart",
        "patient_form_fields.dart",
        "app_colors.dart",
        "ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/patient/patient_detail_view.dart",
      "description": "A Flutter view for displaying detailed patient information, enabling medical professionals to review comprehensive patient records with a clean, structured interface",
      "class_diagram": "@startuml\nclass PatientDetailView {\n  -int patientId\n  +Widget builder()\n  +PatientDetailViewModel viewModelBuilder()\n  -Widget _buildInfoSection()\n  -Widget _buildInfoTile()\n}\nclass PatientDetailViewModel\nPatientDetailView --> PatientDetailViewModel : uses\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the patient details screen with dynamic content based on patient data and loading states",
          "parameters": [
            "BuildContext",
            "PatientDetailViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the view model for patient details, initializing data retrieval for a specific patient",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PatientDetailViewModel"
        },
        {
          "name": "_buildInfoSection",
          "description": "Renders section headers for organizing patient information",
          "parameters": [
            "String"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildInfoTile",
          "description": "Generates individual information rows with labels and values",
          "parameters": [
            "String",
            "String"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "patient_detail_viewmodel.dart",
        "app_colors.dart",
        "ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/patient/patient_form_viewmodel.dart",
      "description": "A view model for managing patient form data entry, editing, and validation in a medical application, responsible for handling patient information lifecycle and form state management",
      "class_diagram": "@startuml\nclass PatientFormViewModel {\n  -_patientService: PatientService\n  -_navigationService: NavigationService\n  +initialize(): Future<void>\n  +savePatient(): Future<void>\n  +setName(value: String): void\n  +setAge(value: String): void\n  +setGender(value: String): void\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Load existing patient data when editing, populating form fields with current patient information",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "savePatient",
          "description": "Validate patient input and create or update patient record in the system",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "_validateInputs",
          "description": "Perform comprehensive validation of patient data before submission",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "setName",
          "description": "Update patient name in the view model state",
          "parameters": [
            "value"
          ],
          "return_type": "void"
        },
        {
          "name": "setAge",
          "description": "Update patient age in the view model state",
          "parameters": [
            "value"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "patient_service.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "patient.dart"
      ]
    },
    {
      "name": "lib/features/patient/patient_list_viewmodel.dart",
      "description": "A ViewModel for managing patient list interactions, providing search, retrieval, navigation, and deletion capabilities for patient records in a medical application",
      "class_diagram": "@startuml\nclass PatientListViewModel {\n  - _patientService: PatientService\n  - _navigationService: NavigationService\n  - _patients: List<Patient>\n  - _searchQuery: String\n  + initialize(): Future<void>\n  + onSearchQueryChanged(query: String): void\n  + refreshPatients(): Future<void>\n  + navigateToAddPatient(): void\n  + navigateToPatientDetail(patientId: int): void\n  + deletePatient(patientId: int): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initial loading of patient list, setting up the base state of the view model",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "onSearchQueryChanged",
          "description": "Update search query and trigger UI rebuild with filtered patient results",
          "parameters": [
            "query"
          ],
          "return_type": "void"
        },
        {
          "name": "navigateToAddPatient",
          "description": "Navigate to patient creation form",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "navigateToPatientDetail",
          "description": "Navigate to specific patient's detailed view",
          "parameters": [
            "patientId"
          ],
          "return_type": "void"
        },
        {
          "name": "deletePatient",
          "description": "Remove a patient record from the system",
          "parameters": [
            "patientId"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:doctor_apps/services/patient_service.dart",
        "package:stacked_services/stacked_services.dart",
        "package:stacked/stacked.dart",
        "package:doctor_apps/models/patient.dart"
      ]
    },
    {
      "name": "lib/features/patient/widgets/patient_form_fields.dart",
      "description": "A reusable form widget for capturing comprehensive patient information with dynamic input handling and flexible state management",
      "class_diagram": "@startuml\nclass PatientFormFields {\n  +onNameChanged(String name)\n  +onAgeChanged(String age)\n  +onGenderChanged(String gender)\n  +onPhoneChanged(String phone)\n  +onAddressChanged(String address)\n  +onMedicalHistoryChanged(String history)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs a form with text input fields for capturing patient details",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "doctor_apps/models/patient.dart",
        "doctor_apps/ui/common/ui_helpers.dart",
        "doctor_apps/utils/const/const.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "A startup management view model responsible for handling initial application navigation and startup logic, ensuring smooth transition into the main app experience",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  - _navigationService: NavigationService\n  + runStartupLogic(): Future\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Executes initial startup tasks and determines the first screen/navigation route for the application",
          "parameters": null,
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "stacked",
        "stacked_services",
        "app.locator.dart",
        "app.router.dart"
      ]
    },
    {
      "name": "lib/features/patient/widgets/patient_card.dart",
      "description": "A reusable Flutter widget for displaying patient information in a card format, providing a comprehensive and interactive view of patient details with deletion capability",
      "class_diagram": "@startuml\nclass PatientCard {\n  - Patient patient\n  - VoidCallback onTap\n  - VoidCallback onDelete\n  + build(BuildContext context)\n  - _buildInfoRow(IconData icon, String text)\n  - _showDeleteConfirmation(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Creates the visual representation of a patient card with interactive capabilities",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildInfoRow",
          "description": "Generates a consistent row layout for displaying patient details with an icon and text",
          "parameters": [
            "IconData icon",
            "String text"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_showDeleteConfirmation",
          "description": "Displays a confirmation dialog before permanently deleting a patient record",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "doctor_apps/models/patient.dart",
        "doctor_apps/ui/common/app_colors.dart",
        "gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "Provides the initial loading screen/view for the DoctorApps application, responsible for handling the startup sequence and transitioning into the main application flow",
      "class_diagram": "@startuml\nclass StartupView {\n  +builder(BuildContext, StartupViewModel)\n  +viewModelBuilder(BuildContext)\n  +onViewModelReady(StartupViewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Renders the startup loading screen with app name and loading indicator",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the StartupViewModel instance for managing startup logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Triggers initial startup logic after view is first rendered",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "stacked/stacked.dart",
        "startup_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "A ViewModel for the home screen that manages UI state and provides interactive features like counter manipulation and dialog/bottom sheet display using the Stacked architectural pattern",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + incrementCounter()\n  + showDialog()\n  + showBottomSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the internal counter and triggers UI rebuild",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with dynamic counter value",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with predefined content",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "app/app.bottomsheets.dart",
        "app/app.dialogs.dart",
        "app/app.locator.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "A home screen view that demonstrates basic UI interaction and state management using the Stacked architecture, featuring a counter, dialog, and bottom sheet functionality",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(context: BuildContext, viewModel: HomeViewModel)\n  +viewModelBuilder(context: BuildContext)\n}\nclass HomeViewModel {\n  +incrementCounter()\n  +showDialog()\n  +showBottomSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the primary UI layout for the home screen with interactive elements",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates and returns the associated ViewModel for the home screen",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        },
        {
          "name": "incrementCounter",
          "description": "Increases the counter value and updates the UI state",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showDialog",
          "description": "Displays a dialog box from the home screen",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showBottomSheet",
          "description": "Presents a bottom sheet from the home screen",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "stacked/stacked.dart",
        "home_viewmodel.dart"
      ]
    },
    {
      "name": "lib/models/patient.dart",
      "description": "A data model representing a patient's comprehensive medical profile, designed to standardize patient information storage, serialization, and manipulation across a healthcare application",
      "class_diagram": "@startuml\nclass Patient {\n  +int? id\n  +String name\n  +int age\n  +String gender\n  +String phone\n  +String address\n  +String medicalHistory\n  +fromJson(Map<String, dynamic> json)\n  +toJson()\n  +copyWith()\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a JSON map into a Patient object, enabling data deserialization from external sources",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Patient"
        },
        {
          "name": "toJson",
          "description": "Serializes a Patient object into a JSON-compatible map, facilitating data transmission and storage",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "copyWith",
          "description": "Creates a new Patient instance with optional field modifications, supporting immutable state updates",
          "parameters": [
            "int? id",
            "String? name",
            "int? age",
            "String? gender",
            "String? phone",
            "String? address",
            "String? medicalHistory"
          ],
          "return_type": "Patient"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Configures the root MaterialApp widget with global UI/UX behaviors and routing configuration for the entire doctor appointment application",
      "class_diagram": "@startuml\nclass AppView {\n  +build(BuildContext context)\n}\nclass _App {\n  +build(BuildContext context, AppViewModel viewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the root application widget with global settings like text scaling, keyboard behavior, and navigation configuration",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:doctor_apps/app/app.router.dart",
        "package:doctor_apps/features/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/patient/patient_list_view.dart",
      "description": "A comprehensive patient management screen that enables healthcare professionals to view, search, and interact with patient records in a user-friendly mobile interface",
      "class_diagram": "@startuml\nclass PatientListView {\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n  +onViewModelReady(viewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI for patient list screen with search, loading states, and patient list rendering",
          "parameters": [
            "BuildContext",
            "PatientListViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the view model instance for managing patient list state and interactions",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PatientListViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the patient list view model, typically triggering initial data load",
          "parameters": [
            "PatientListViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "patient_list_viewmodel.dart",
        "patient_card.dart",
        "app_colors.dart",
        "ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/patient/patient_repository.dart",
      "description": "A repository class for managing patient data, providing CRUD operations with in-memory storage, simulating a data persistence layer for a healthcare application",
      "class_diagram": "@startuml\nclass PatientRepository {\n  - _patients: List<Patient>\n  - _nextId: int\n  + getPatients(): Future<List<Patient>>\n  + getPatient(id: int): Future<Patient>\n  + createPatient(patient: Patient): Future<Patient>\n  + updatePatient(patient: Patient): Future<Patient>\n  + deletePatient(id: int): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "getPatients",
          "description": "Retrieves a list of all patients, simulating a database fetch with a delay",
          "parameters": null,
          "return_type": "Future<List<Patient>>"
        },
        {
          "name": "getPatient",
          "description": "Finds and returns a specific patient by their unique ID",
          "parameters": [
            "id"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "createPatient",
          "description": "Adds a new patient to the repository with an auto-generated ID",
          "parameters": [
            "patient"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "updatePatient",
          "description": "Updates an existing patient's information in the repository",
          "parameters": [
            "patient"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "deletePatient",
          "description": "Removes a patient from the repository by their unique ID",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "doctor_apps/models/patient.dart",
        "doctor_apps/utils/const/const.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "Application entry point responsible for initializing the Flutter app with critical setup, error handling, and app configuration",
      "class_diagram": "@startuml\nnode main {\n  [App Initialization]\n  [Error Handling]\n  [Orientation Configuration]\n}\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "Primary application startup method that configures app initialization, sets device orientation, and handles global error scenarios",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "dart:async",
        "flutter/material.dart",
        "flutter/services.dart",
        "doctor_apps/app/app.bottomsheets.dart",
        "doctor_apps/app/app.dialogs.dart",
        "doctor_apps/app/app.locator.dart",
        "features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/features/patient/patient_detail_viewmodel.dart",
      "description": "A ViewModel responsible for managing patient detail view state and interactions, enabling loading, displaying, and navigating to patient edit functionality in a medical application",
      "class_diagram": "@startuml\nclass PatientDetailViewModel {\n  -_patientService: PatientService\n  -_navigationService: NavigationService\n  +patientId: int\n  +patient: Patient?\n  +initialize(): void\n  +navigateToEdit(): void\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Loads patient details from service, handling loading state and error scenarios",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToEdit",
          "description": "Navigates to patient edit form with current patient's ID",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:doctor_apps/services/patient_service.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:doctor_apps/models/patient.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant StartupView\nparticipant PatientListView\nparticipant PatientDetailView\nparticipant PatientFormView\n\nUser -> StartupView: App Launch\nStartupView -> PatientListView: Navigate\nUser -> PatientListView: View/Search Patients\nUser -> PatientListView: Select Patient\nPatientListView -> PatientDetailView: Navigate\nUser -> PatientDetailView: View Details\nPatientDetailView -> PatientFormView: Edit Patient\nUser -> PatientFormView: Update Patient Info\nPatientFormView -> PatientListView: Save and Return\n@enduml",
  "state_management_flow": "State management is handled exclusively through Stacked's reactive ViewModels extending BaseViewModel. ViewModels manage local state and react to changes, automatically triggering UI updates. Services like PatientService handle data operations, while ViewModels coordinate between UI and data layers. Dependency injection via app.locator.dart ensures clean, decoupled service provisioning across the application.",
  "navigation_flow": "Navigation is managed through Stacked's type-safe routing system defined in app.router.dart. The application supports programmatic navigation between views using NavigationService, with predefined routes for StartupView, PatientListView, PatientDetailView, and PatientFormView. Routes support optional parameters and transition styles, ensuring compile-time routing validation and a consistent navigation experience."
}